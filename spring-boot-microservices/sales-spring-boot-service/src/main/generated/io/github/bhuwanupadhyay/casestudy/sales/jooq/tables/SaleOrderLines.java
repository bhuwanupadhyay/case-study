/*
 * This file is generated by jOOQ.
 */
package io.github.bhuwanupadhyay.casestudy.sales.jooq.tables;


import io.github.bhuwanupadhyay.casestudy.sales.jooq.Keys;
import io.github.bhuwanupadhyay.casestudy.sales.jooq.Public;
import io.github.bhuwanupadhyay.casestudy.sales.jooq.tables.records.SaleOrderLinesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SaleOrderLines extends TableImpl<SaleOrderLinesRecord> {

    private static final long serialVersionUID = 1208381181;

    /**
     * The reference instance of <code>public.sale_order_lines</code>
     */
    public static final SaleOrderLines SALE_ORDER_LINES = new SaleOrderLines();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SaleOrderLinesRecord> getRecordType() {
        return SaleOrderLinesRecord.class;
    }

    /**
     * The column <code>public.sale_order_lines.id</code>.
     */
    public final TableField<SaleOrderLinesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sale_order_lines.order_id</code>.
     */
    public final TableField<SaleOrderLinesRecord, String> ORDER_ID = createField(DSL.name("order_id"), org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.sale_order_lines.item_id</code>.
     */
    public final TableField<SaleOrderLinesRecord, String> ITEM_ID = createField(DSL.name("item_id"), org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.sale_order_lines.quantity</code>.
     */
    public final TableField<SaleOrderLinesRecord, Integer> QUANTITY = createField(DSL.name("quantity"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.sale_order_lines</code> table reference
     */
    public SaleOrderLines() {
        this(DSL.name("sale_order_lines"), null);
    }

    /**
     * Create an aliased <code>public.sale_order_lines</code> table reference
     */
    public SaleOrderLines(String alias) {
        this(DSL.name(alias), SALE_ORDER_LINES);
    }

    /**
     * Create an aliased <code>public.sale_order_lines</code> table reference
     */
    public SaleOrderLines(Name alias) {
        this(alias, SALE_ORDER_LINES);
    }

    private SaleOrderLines(Name alias, Table<SaleOrderLinesRecord> aliased) {
        this(alias, aliased, null);
    }

    private SaleOrderLines(Name alias, Table<SaleOrderLinesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SaleOrderLines(Table<O> child, ForeignKey<O, SaleOrderLinesRecord> key) {
        super(child, key, SALE_ORDER_LINES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<SaleOrderLinesRecord, Long> getIdentity() {
        return Keys.IDENTITY_SALE_ORDER_LINES;
    }

    @Override
    public UniqueKey<SaleOrderLinesRecord> getPrimaryKey() {
        return Keys.PK_SALE_ORDER_LINES;
    }

    @Override
    public List<UniqueKey<SaleOrderLinesRecord>> getKeys() {
        return Arrays.<UniqueKey<SaleOrderLinesRecord>>asList(Keys.PK_SALE_ORDER_LINES);
    }

    @Override
    public List<ForeignKey<SaleOrderLinesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SaleOrderLinesRecord, ?>>asList(Keys.SALE_ORDER_LINES__FK_SALE_ORDERS);
    }

    public SaleOrders saleOrders() {
        return new SaleOrders(this, Keys.SALE_ORDER_LINES__FK_SALE_ORDERS);
    }

    @Override
    public SaleOrderLines as(String alias) {
        return new SaleOrderLines(DSL.name(alias), this);
    }

    @Override
    public SaleOrderLines as(Name alias) {
        return new SaleOrderLines(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SaleOrderLines rename(String name) {
        return new SaleOrderLines(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SaleOrderLines rename(Name name) {
        return new SaleOrderLines(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
